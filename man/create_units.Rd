% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_units.r, R/units.r
\name{create_units}
\alias{create_units}
\title{Create units for the cssAnnotator}
\usage{
create_units(
  d,
  id,
  text = NULL,
  meta = NULL,
  image = NULL,
  markdown = NA,
  variables = NULL,
  type = c("unit", "train", "test"),
  condition = NULL
)

create_units(
  d,
  id,
  text = NULL,
  meta = NULL,
  image = NULL,
  markdown = NA,
  variables = NULL,
  type = c("unit", "train", "test"),
  condition = NULL
)
}
\arguments{
\item{d}{A data.frame}

\item{id}{A character string with the name of a column with unique ids.}

\item{text}{A character vector with column names to use as text fields. Can also be the output of \code{\link{text_fields}},
which allows more customization options such as styling (bold, fontsize) per field, and distinguishing the coding unit and context unit.}

\item{meta}{A character vector with names of columns that contain paths to image (png/jpeg) files.}

\item{image}{A character vector with paths to jpg files.}

\item{markdown}{The name of a column that contains a markdown string. A markdown field cannot be annotated,
but it makes it easy to do some custom styling in question units. See \url{https://commonmark.org/help/} for help,
and you can test the markdown here: \url{https://spec.commonmark.org/dingus/}.}

\item{variables}{A character vector with column names to use as unit variables}

\item{type}{A column in the data.frame with types. Valid types are: "code", "train", "test" and "survey"}

\item{data}{A data.frame}

\item{gold}{A character vector with column names of gold answers. The name of the column should then
correspond to a variable/question name in the codebook, and the value should match a code.}
}
\value{
A list of units, to be used inside \code{\link{create_codebook}}
}
\description{
Create the basis for a units object. The content of the units can then be
designed in a pipe of \code{\link{set_text}}, \code{\link{set_meta}}, \code{\link{set_image}} and \code{\link{set_markdown}} functions

Create an object that represents the coding units.
}
\details{
A codingjob can include gold units for which the 'correct' answer is already given. These units
can be used as 'training' and 'test' units. Training units are shown at the beginning of a job,
and coders are shown whether they gave the correct answer. Test units are mixed in with regular units,
and can then either inform coders when they're wrong (to keep em sharp) or silently keep track of
bad answers to disqualify bad coders.
}
\examples{
d = data.frame(id = c(1,2),
               title = c('title 1', 'title 2'),
               text=c('text 1','text 2'),
               pre=c('<','<'), post=c('>','>'),
               date=c('2010','2020'),
               topic=c('a','b'))

## simple units
create_units(d, id='id', text=c('title','text'), meta='date', variables='topic')

## using text_fields() for more options
create_units(d, 'id', text_fields(
   text_field('title'),
   text_field('text', context_before='pre', context_after='post')
))
}
